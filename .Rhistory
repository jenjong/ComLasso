# restore
z_tmp = rep(0, p*restore_num)
restore_num = 5e+3
# restore
z_tmp = rep(0, p*restore_num)
z_tmp
j_k = 1
# restore
z_tmp = rep(0, p*restore_num)
j_k = 1
z_tmp = rep(0, p*restore_num)
j_k = 1
for (j in rep(1:p, restore_num))
{
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
v = sqrt(1/Omg_e[j,j])
if (j == 1) b = Inf else b = z[j-1]
if (j == p) a = -Inf else a = z[j+1]
tz = rtruncnorm(1, a=a, b=b, mean = m, sd = v)
z[j] = tz
z_tmp[j_k]  = tz
j_k = j_k + 1
}
zmat = matrix(z_tmp, restore_num, p, byrow = T)
zmat
colMeans(zmat)
boxplot(zmat)
burn_num = 1e+4
restore_num = 5e+3
# burning
for (j in rep(1:p, burn_num))
{
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
v = sqrt(1/Omg_e[j,j])
if (j == 1) b = Inf else b = z[j-1]
if (j == p) a = -Inf else a = z[j+1]
z[j] = rtruncnorm(1, a=a, b=b, mean = m, sd = v)
}
# restore
z_tmp = rep(0, p*restore_num)
j_k = 1
for (j in rep(1:p, restore_num))
{
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
v = sqrt(1/Omg_e[j,j])
if (j == 1) b = Inf else b = z[j-1]
if (j == p) a = -Inf else a = z[j+1]
tz = rtruncnorm(1, a=a, b=b, mean = m, sd = v)
z[j] = tz
z_tmp[j_k]  = tz
j_k = j_k + 1
}
zmat = matrix(z_tmp, restore_num, p, byrow = T)
colMeans(zmat)
boxplot(zmat)
burn_num = 1e+4
restore_num = 5e+3
# burning
for (j in rep(1:p, burn_num))
{
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
v = sqrt(1/Omg_e[j,j])
if (j == 1) b = Inf else b = z[j-1]
if (j == p) a = -Inf else a = z[j+1]
z[j] = rtruncnorm(1, a=a, b=b, mean = m, sd = v)
}
# restore
z_tmp = rep(0, p*restore_num)
j_k = 1
for (j in rep(1:p, restore_num))
{
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
v = sqrt(1/Omg_e[j,j])
if (j == 1) b = Inf else b = z[j-1]
if (j == p) a = -Inf else a = z[j+1]
tz = rtruncnorm(1, a=a, b=b, mean = m, sd = v)
z[j] = tz
z_tmp[j_k]  = tz
j_k = j_k + 1
}
zmat = matrix(z_tmp, restore_num, p, byrow = T)
colMeans(zmat)
boxplot(zmat)
burn_num = 1e+4
restore_num = 5e+3
# burning
for (j in rep(1:p, burn_num))
{
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
v = sqrt(1/Omg_e[j,j])
if (j == 1) b = Inf else b = z[j-1]
if (j == p) a = -Inf else a = z[j+1]
z[j] = rtruncnorm(1, a=a, b=b, mean = m, sd = v)
}
# restore
z_tmp = rep(0, p*restore_num)
j_k = 1
for (j in rep(1:p, restore_num))
{
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
v = sqrt(1/Omg_e[j,j])
if (j == 1) b = Inf else b = z[j-1]
if (j == p) a = -Inf else a = z[j+1]
tz = rtruncnorm(1, a=a, b=b, mean = m, sd = v)
z[j] = tz
z_tmp[j_k]  = tz
j_k = j_k + 1
}
zmat = matrix(z_tmp, restore_num, p, byrow = T)
colMeans(zmat)
boxplot(zmat)
colMeans(zmat)
colMeans(zmat)
boxplot(zmat)
# sampling
i = 2 ; length(rank_id)
idx = which(rank_index == i)
x = pi_mat[idx[1],]
# set an initial of z
while(T)
{
z = mvrnorm(1, mu_e, Sig_e)
zo = order(z, decreasing = T)
if (!any(x != zo)) break
}
burn_num = 1e+4
restore_num = 5e+3
# burning
for (j in rep(1:p, burn_num))
{
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
v = sqrt(1/Omg_e[j,j])
if (j == 1) b = Inf else b = z[j-1]
if (j == p) a = -Inf else a = z[j+1]
z[j] = rtruncnorm(1, a=a, b=b, mean = m, sd = v)
}
# restore
z_tmp = rep(0, p*restore_num)
j_k = 1
for (j in rep(1:p, restore_num))
{
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
v = sqrt(1/Omg_e[j,j])
if (j == 1) b = Inf else b = z[j-1]
if (j == p) a = -Inf else a = z[j+1]
tz = rtruncnorm(1, a=a, b=b, mean = m, sd = v)
z[j] = tz
z_tmp[j_k]  = tz
j_k = j_k + 1
}
zmat = matrix(z_tmp, restore_num, p, byrow = T)
colMeans(zmat)
boxplot(zmat)
x
while(T)
{
z = mvrnorm(1, mu_e, Sig_e)
zo = order(z, decreasing = T)
if (!any(x != zo)) break
}
z
rank_id
rank_id
x
x
x
n = 1
set.seed(1)
z = mvrnorm(n, mu, Sigma)
z
t(apply(z, 1, order, decreasing = T))
z = mvrnorm(n, mu, Sigma)
t(apply(z, 1, order, decreasing = T))
n = 2
set.seed(1)
z = mvrnorm(n, mu, Sigma)
pi_mat =t(apply(z, 1, order, decreasing = T))
pi_mat
z
x
j = 1
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
x
# burning
x
# burning
rank(x)
?rank
# burning
sort(x)$ix
# burning
sort(x, index.return = T)$ix
rm(list = ls()); gc()
library(MASS)
library(truncnorm)
p = 5
mu = seq(5,0, length = p)
Sigma = diag(1,p)
n = 2
set.seed(1)
z = mvrnorm(n, mu, Sigma)
# pi_mat denotes the ranks of items
pi_mat =t(apply(z, 1, order, decreasing = T))
# ranking index
rank_index_t = c("", n)
for (i in 1:n)
{
x = pi_mat[i,]
if (p<10)
{
xt = as.character(x)
rank_index_t[i] = paste(xt,sep='',collapse = "")
}
if (p>=10)
{
xt = x
idx = (nchar(xt)==1)
xt[idx] = paste0("0",xt[idx])
rank_index_t[i] = paste(xt,sep='',collapse = "")
}
}
rank_index_t = factor(rank_index_t)
rank_id = levels(rank_index_t)
rank_index = as.integer(rank_index_t)
# initialization:: pairwise comparisons (package)
mu_e = seq(5,0, length = p)
Sig_e = diag(1,p)
Omg_e = solve(Sig_e)
# sampling
i = 2 ; length(rank_id)
idx = which(rank_index == i)
x = pi_mat[idx[1],]
# set an initial of z
while(T)
{
z = mvrnorm(1, mu_e, Sig_e)
zo = order(z, decreasing = T)
if (!any(x != zo)) break
}
burn_num = 1e+4
restore_num = 5e+3
# sampling
i = 10 ; length(rank_id)
idx = which(rank_index == i)
x = pi_mat[idx[1],]
# set an initial of z
while(T)
{
z = mvrnorm(1, mu_e, Sig_e)
zo = order(z, decreasing = T)
if (!any(x != zo)) break
}
idx
rank_index
rm(list = ls()); gc()
library(MASS)
library(truncnorm)
p = 5
mu = seq(5,0, length = p)
Sigma = diag(1,p)
n = 100
set.seed(1)
z = mvrnorm(n, mu, Sigma)
# pi_mat denotes the ranks of items
pi_mat =t(apply(z, 1, order, decreasing = T))
# ranking index
rank_index_t = c("", n)
for (i in 1:n)
{
x = pi_mat[i,]
if (p<10)
{
xt = as.character(x)
rank_index_t[i] = paste(xt,sep='',collapse = "")
}
if (p>=10)
{
xt = x
idx = (nchar(xt)==1)
xt[idx] = paste0("0",xt[idx])
rank_index_t[i] = paste(xt,sep='',collapse = "")
}
}
rank_index_t = factor(rank_index_t)
rank_id = levels(rank_index_t)
rank_index = as.integer(rank_index_t)
# initialization:: pairwise comparisons (package)
mu_e = seq(5,0, length = p)
Sig_e = diag(1,p)
Omg_e = solve(Sig_e)
# sampling
i = 10 ; length(rank_id)
idx = which(rank_index == i)
x = pi_mat[idx[1],]
# set an initial of z
while(T)
{
z = mvrnorm(1, mu_e, Sig_e)
zo = order(z, decreasing = T)
if (!any(x != zo)) break
}
rank_id
x
burn_num = 1e+4
restore_num = 5e+3
# burning
sort(x, index.return = T)$ix
x
# burning
sort(x, index.return = T)
i = 9 ; length(rank_id)
idx = which(rank_index == i)
x = pi_mat[idx[1],]
# set an initial of z
while(T)
{
z = mvrnorm(1, mu_e, Sig_e)
zo = order(z, decreasing = T)
if (!any(x != zo)) break
}
burn_num = 1e+4
restore_num = 5e+3
# burning
sort(x, index.return = T)
x
# burning
sort(x, index.return = T)$ix
# burning
ix = sort(x, index.return = T)$ix
ix
ix
j_c = 1
ix
x
burn_num = 1e+4
restore_num = 5e+3
# burning
ix = sort(x, index.return = T)$ix
ix
j_c = 1
j_c
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
ix
x
j = 1
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
m
v = sqrt(1/Omg_e[j,j])
v
if (j_c == 1) b = Inf else b = z[x[j_c-1]]
j_c+1
x[j_c+1]
ix[j_c+1]
library(genlasso)
library(glasso)
install.packages("glasso")
library(glasso)
?glasso
x<-matrix(rnorm(50*20),ncol=20)
s<- var(x)
a<-glasso(s, rho=.01)
aa<-glasso(s,rho=.02, w.init=a$w, wi.init=a$wi)
aa
x<-matrix(rnorm(50*20),ncol=20)
s<- var(x)
a<-glasso(s, rho=.01)
aa<-glasso(s,rho=.2, w.init=a$w, wi.init=a$wi)
aa
install.packages("doParallel")
install.packages("foreach")
library(doParallel)
library(foreach)
rm(list=ls()); gc()
library(doParallel)
library(foreach)
numCores = 4
registerDoParallel(numCores)  # use multicore, set to the number of our cores
foreach (i=1:3) %dopar% {
sqrt(i)
}
afun = function(i) sqrt(i)
foreach (i=1:3) %dopar% {
afun(i)
}
a = c(2,1,3)
foreach (i=a) %dopar% {
afun(i)
}
?foreach
install.packages("C:/Users/Jeon/Desktop/testpack.zip", repos = NULL, type = "win.binary")
library(testpack)
hello()
install.packages("RcppTN")
library(RcppTN)
?rtn
rtn()
library(Rcpp)
sourceCpp("C:/Users/Jeon/Desktop/j1/rtnRcpp.cpp")
sourceCpp("C:/Users/Jeon/Desktop/j1/rtnRcpp.cpp")
length(rank_id)
35+107+190
(35+107+190)*5
(26+67+132)*5
1125*1300
1660*1300
(35+107+190)*5
(35+107+190)*5*1200
(26+67+132)*5*1200
7uuk
llom9999 , ,llj
r
3
657
gdvggydfpfldp
(26+67+132)
(35+107+190)
190+132+132
(26+67+132)*5
rm(list=ls())
library(Matrix)
library(Rcpp)
library(RcppArmadillo)
library(devtools)
library(Rglpk)
library(MethylCapSig)
install_github("glmgen/genlasso")
library(genlasso)
setwd("~/github/ComLasso")
#setwd("~/github/ComLasso")
sourceCpp('./library/inner.cpp')
source("./library/ComLassoC.R")
rX<- read.csv("./data/capital_season.csv")
ry<- read.csv("./data/income.csv")[,-1]
y = unlist(ry[5,]/ry[1,])
y = y[-length(y)] # 2003-1~2019-1
X = as.matrix(rX[,130:197]) # 2002-1~2018-4
X = t(X)
x = sweep(X,1,rowSums(X),"/")
idx = 1:nrow(x)
y
x1 = x[tail(idx, 65),]
x2 = x[tail(idx, 65)-1,]
x3 = x[tail(idx, 65)-2,]
x4 = x[tail(idx, 65)-3,]
xx = cbind(x1,x2,x3,x4)
xx = log(xx)
pk = rep(8,4)
fit = comLassoC(xx,y,pk=pk,lam_min=0,tol=1e-08,KKT_check=FALSE)
dim(fit$coefMat)
coefMat = fit$coefMat
est.var = sum((y-cbind(1,xx)%*%coefMat[nrow(coefMat),])^2)/(length(y)-1)
aic.vec = c()
i = 1
for (i in 1:nrow(coefMat))
{
coefvec = coefMat[i,-1]
df = 0
for (j in 1:4)
{
subvec = coefvec[((j-1)*8+1):(j*8)]
if (sum(subvec !=0)>0) df <- df + (sum(subvec !=0))-1
}
aic.vec[i]<-
sum((y-cbind(1,xx)%*%coefMat[i,])^2)/est.var + log(length(y)) + 2*df
}
plot(aic.vec)
which.min(aic.vec)
k = 1
for ( i in 1:8)
{
if (i == 1)
plot(fit$coefMat[,i+8*(k-1)+1], ylim = c(-10,10), col = i,
type = 'l')
if (i>1)
lines(fit$coefMat[,i+8*(k-1)+1], ylim = c(-10,10),
col = i)
abline(v=17)
}
k = 2
for ( i in 1:8)
{
if (i == 1)
plot(fit$coefMat[,i+8*(k-1)+1], ylim = c(-10,10), col = i,
type = 'l')
if (i>1)
lines(fit$coefMat[,i+8*(k-1)+1], ylim = c(-10,10),
col = i)
abline(v=17)
}
k = 3
for ( i in 1:8)
{
if (i == 1)
plot(fit$coefMat[,i+8*(k-1)+1], ylim = c(-10,10), col = i,
type = 'l')
if (i>1)
lines(fit$coefMat[,i+8*(k-1)+1], ylim = c(-10,10),
col = i)
abline(v=17)
}
k = 4
for ( i in 1:8)
{
if (i == 1)
plot(fit$coefMat[,i+8*(k-1)+1], ylim = c(-10,10), col = i,
type = 'l')
if (i>1)
lines(fit$coefMat[,i+8*(k-1)+1], ylim = c(-10,10),
col = i)
abline(v=17)
}
