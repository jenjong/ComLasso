library(MASS)
library(truncnorm)
p = 5
mu = seq(5,0, length = p)
Sigma = diag(1,p)
n = 100
set.seed(1)
z = mvrnorm(n, mu, Sigma)
# pi_mat denotes the ranks of items
pi_mat =t(apply(z, 1, order, decreasing = T))
# ranking index
rank_index_t = c("", n)
for (i in 1:n)
{
x = pi_mat[i,]
if (p<10)
{
xt = as.character(x)
rank_index_t[i] = paste(xt,sep='',collapse = "")
}
if (p>=10)
{
xt = x
idx = (nchar(xt)==1)
xt[idx] = paste0("0",xt[idx])
rank_index_t[i] = paste(xt,sep='',collapse = "")
}
}
rank_index_t = factor(rank_index_t)
rank_id = levels(rank_index_t)
rank_index = as.integer(rank_index_t)
# initialization:: pairwise comparisons (package)
mu_e = seq(5,0, length = p)
Sig_e = diag(1,p)
Omg_e = solve(Sig_e)
# sampling
i = 10 ; length(rank_id)
idx = which(rank_index == i)
x = pi_mat[idx[1],]
# set an initial of z
while(T)
{
z = mvrnorm(1, mu_e, Sig_e)
zo = order(z, decreasing = T)
if (!any(x != zo)) break
}
rank_id
x
burn_num = 1e+4
restore_num = 5e+3
# burning
sort(x, index.return = T)$ix
x
# burning
sort(x, index.return = T)
i = 9 ; length(rank_id)
idx = which(rank_index == i)
x = pi_mat[idx[1],]
# set an initial of z
while(T)
{
z = mvrnorm(1, mu_e, Sig_e)
zo = order(z, decreasing = T)
if (!any(x != zo)) break
}
burn_num = 1e+4
restore_num = 5e+3
# burning
sort(x, index.return = T)
x
# burning
sort(x, index.return = T)$ix
# burning
ix = sort(x, index.return = T)$ix
ix
ix
j_c = 1
ix
x
burn_num = 1e+4
restore_num = 5e+3
# burning
ix = sort(x, index.return = T)$ix
ix
j_c = 1
j_c
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
ix
x
j = 1
m = mu_e[j]- sum(Omg_e[j,][-j]*(z[-j] - mu_e[-j]))/Omg_e[j,j]
m
v = sqrt(1/Omg_e[j,j])
v
if (j_c == 1) b = Inf else b = z[x[j_c-1]]
j_c+1
x[j_c+1]
ix[j_c+1]
library(genlasso)
library(glasso)
install.packages("glasso")
library(glasso)
?glasso
x<-matrix(rnorm(50*20),ncol=20)
s<- var(x)
a<-glasso(s, rho=.01)
aa<-glasso(s,rho=.02, w.init=a$w, wi.init=a$wi)
aa
x<-matrix(rnorm(50*20),ncol=20)
s<- var(x)
a<-glasso(s, rho=.01)
aa<-glasso(s,rho=.2, w.init=a$w, wi.init=a$wi)
aa
install.packages("doParallel")
install.packages("foreach")
library(doParallel)
library(foreach)
rm(list=ls()); gc()
library(doParallel)
library(foreach)
numCores = 4
registerDoParallel(numCores)  # use multicore, set to the number of our cores
foreach (i=1:3) %dopar% {
sqrt(i)
}
afun = function(i) sqrt(i)
foreach (i=1:3) %dopar% {
afun(i)
}
a = c(2,1,3)
foreach (i=a) %dopar% {
afun(i)
}
?foreach
install.packages("C:/Users/Jeon/Desktop/testpack.zip", repos = NULL, type = "win.binary")
library(testpack)
hello()
install.packages("RcppTN")
library(RcppTN)
?rtn
rtn()
library(Rcpp)
sourceCpp("C:/Users/Jeon/Desktop/j1/rtnRcpp.cpp")
sourceCpp("C:/Users/Jeon/Desktop/j1/rtnRcpp.cpp")
length(rank_id)
35+107+190
(35+107+190)*5
(26+67+132)*5
1125*1300
1660*1300
(35+107+190)*5
(35+107+190)*5*1200
(26+67+132)*5*1200
7uuk
llom9999 , ,llj
r
3
657
gdvggydfpfldp
(26+67+132)
(35+107+190)
190+132+132
(26+67+132)*5
rm(list=ls())
library(Matrix)
library(Rcpp)
if(!require("RcppArmadillo")) install.packages("RcppArmadillo")
library(RcppArmadillo)
if(!require("devtools")) install.packages("devtools")
library(devtools)
if(!require("Rglpk")) install.packages("Rglpk")
library(Rglpk)
if(!require("MethylCapSig")) install.packages("MethylCapSig")
library(MethylCapSig)
install_github("glmgen/genlasso")
library(genlasso)
setwd("~/github/comlasso")
sourceCpp('./library/inner.cpp')
source("./library/ComLassoC.R")
source("./library/classo_2.R")
# Set parameters in table 1
# para_vec[[1]] denotes that n = 50, p = 200
para_vec = list()
para_vec[[1]] <- c(100,20)
para_vec[[2]] <- c(100,50)
para_vec[[3]] <- c(100,100)
para_vec[[4]] <- c(100,200)
para_vec[[5]] <- c(100,500)
para_vec[[6]] <- c(100,1000)
runtime.list <- vector(mode="list",length=length(para_vec))
# number of repetitions
Rnum <- 21
ll = 1
for(ll in 1:length(para_vec))
{
n = para_vec[[ll]][1]
pk <- para_vec[[ll]][-1]
idx_gs <- cumsum(pk)-pk+1
idx_ge <- cumsum(pk)
idx_gs_r  = idx_gs - 0:(length(pk)-1)
idx_ge_r  = idx_ge - 1:length(pk)
p = sum(pk)
B_list = list()
for (j in 1:length(pk))
{
sigma <- 0.5^(abs(outer(1:(pk[j]-1),1:(pk[j]-1),"-")))
svdFit <- svd(sigma)
B = diag(svdFit$d)^0.5 %*% t(svdFit$v)
if ( j == 1)
{
mm<-rep(0,pk[j]-1); mm[1:5]<- log(0.5*pk[j])
}
B_list[[j]] = B
}
runtime<-matrix(0,Rnum,3)
colnames(runtime) <-c("comlasso", "genlasso", "zhou")
r = 1
for(r in 1:Rnum)
{
set.seed(r)
w = NULL
z = NULL
for (j in 1:length(pk))
{
B <- B_list[[j]]
tmp = matrix(rnorm(n*(pk[j]-1)), n, pk[j]-1) %*% B
if (j == 1) tmp = tmp + mm
tmpU = cbind(exp(tmp), 1)
z = cbind(z, sweep(tmpU, 1, rowSums(tmpU), FUN = "/") )
w <- cbind(w, tmp)
}
b <- rep(0,p-length(pk))
b[1:5] <- c(1,-0.8,0.6,0,0)
b[6:8] <- c(-1.5, -0.5, 1.2)
y <- drop(w %*% b)+rnorm(n,0,0.5^2)
# reparametrization for genlasso
rX = X = log(z)
Cm <- diag(1,p)
for (i in 1:length(pk))
{
sidx = idx_gs[i]:idx_ge[i]
for (j in sidx) rX[,j] = rX[,j] - rX[,idx_ge[i]]
Cm[idx_ge[i],sidx] <- 1
}
rX <- rX[,-(idx_ge)]
Cm <- Cm[,-(idx_ge)]
Cm <- cbind(0,Cm)
rX <- cbind(1, rX)
#if (p>n) Cm <- Matrix(Cm, sparse = TRUE)
Aeq = matrix(rep(1, pk), nrow = 1)
beq = matrix(0, nrow = 1)
Aineq = matrix(0, nrow = 0, ncol = dim(X)[2])
bineq = rep(0, dim(Aineq)[1])
penwt = rep(1, pk)
runtime[r,1] <- system.time(cfun2 <- comLassoC(X,y,pk=pk,lam_min=0,
tol=1e-08,KKT_check=FALSE) # Prof. Jeon
)[3]
runtime[r,2]<-system.time(gfun<-genlasso(y=y,X=rX,D=Cm,approx=FALSE,
maxsteps=length(cfun2$lambda_vec)+1,
minlam=0,
rtol=1e-07,btol=1e-07,eps=1e-4,
verbose=FALSE,svd=FALSE))[3]
runtime[r,3] <- system.time(
zfun <- zhou(X, y, penwt, Aeq, beq, Aineq, bineq)
)[3]
cat(runtime[r,],"\n")
}
runtime.list[[ll]] <- runtime
}
a = runtime.list
for (i in 1:length(runtime.list))
{
a[[i]] = runtime.list[[i]][-1,]
}
unlist(lapply(a, colMeans))
save.image("table1.rdata")
rm(list=ls())
library(Matrix)
library(Rcpp)
if(!require("RcppArmadillo")) install.packages("RcppArmadillo")
library(RcppArmadillo)
if(!require("devtools")) install.packages("devtools")
library(devtools)
if(!require("Rglpk")) install.packages("Rglpk")
library(Rglpk)
if(!require("MethylCapSig")) install.packages("MethylCapSig")
library(MethylCapSig)
install_github("glmgen/genlasso")
library(genlasso)
setwd("~/github/comlasso")
sourceCpp('./library/inner.cpp')
source("./library/ComLassoC.R")
source("./library/classo_2.R")
# Set parameters in table 1
# para_vec[[1]] denotes that n = 50, p = 200
para_vec = list()
para_vec[[1]] <- c(100,20)
para_vec[[2]] <- c(100,50)
para_vec[[3]] <- c(100,100)
para_vec[[4]] <- c(100,200)
para_vec[[5]] <- c(100,500)
para_vec[[6]] <- c(100,1000)
runtime.list <- vector(mode="list",length=length(para_vec))
# number of repetitions
Rnum <- 21
ll = 1
for(ll in 1:length(para_vec))
{
n = para_vec[[ll]][1]
pk <- para_vec[[ll]][-1]
idx_gs <- cumsum(pk)-pk+1
idx_ge <- cumsum(pk)
idx_gs_r  = idx_gs - 0:(length(pk)-1)
idx_ge_r  = idx_ge - 1:length(pk)
p = sum(pk)
B_list = list()
for (j in 1:length(pk))
{
sigma <- 0.5^(abs(outer(1:(pk[j]-1),1:(pk[j]-1),"-")))
svdFit <- svd(sigma)
B = diag(svdFit$d)^0.5 %*% t(svdFit$v)
if ( j == 1)
{
mm<-rep(0,pk[j]-1); mm[1:5]<- log(0.5*pk[j])
}
B_list[[j]] = B
}
runtime<-matrix(0,Rnum,3)
colnames(runtime) <-c("comlasso", "genlasso", "zhou")
r = 1
for(r in 1:Rnum)
{
set.seed(r)
w = NULL
z = NULL
for (j in 1:length(pk))
{
B <- B_list[[j]]
tmp = matrix(rnorm(n*(pk[j]-1)), n, pk[j]-1) %*% B
if (j == 1) tmp = tmp + mm
tmpU = cbind(exp(tmp), 1)
z = cbind(z, sweep(tmpU, 1, rowSums(tmpU), FUN = "/") )
w <- cbind(w, tmp)
}
b <- rep(0,p-length(pk))
b[1:5] <- c(1,-0.8,0.6,0,0)
b[6:8] <- c(-1.5, -0.5, 1.2)
y <- drop(w %*% b)+rnorm(n,0,0.5^2)
# reparametrization for genlasso
rX = X = log(z)
Cm <- diag(1,p)
for (i in 1:length(pk))
{
sidx = idx_gs[i]:idx_ge[i]
for (j in sidx) rX[,j] = rX[,j] - rX[,idx_ge[i]]
Cm[idx_ge[i],sidx] <- 1
}
rX <- rX[,-(idx_ge)]
Cm <- Cm[,-(idx_ge)]
Cm <- cbind(0,Cm)
rX <- cbind(1, rX)
#if (p>n) Cm <- Matrix(Cm, sparse = TRUE)
Aeq = matrix(rep(1, pk), nrow = 1)
beq = matrix(0, nrow = 1)
Aineq = matrix(0, nrow = 0, ncol = dim(X)[2])
bineq = rep(0, dim(Aineq)[1])
penwt = rep(1, pk)
runtime[r,1] <- system.time(cfun2 <- comLassoC(X,y,pk=pk,lam_min=0,
tol=1e-08,KKT_check=FALSE) # Prof. Jeon
)[3]
runtime[r,2]<-system.time(gfun<-genlasso(y=y,X=rX,D=Cm,approx=FALSE,
maxsteps=length(cfun2$lambda_vec)+1,
minlam=0,
rtol=1e-07,btol=1e-07,eps=1e-4,
verbose=FALSE,svd=FALSE))[3]
gg_try <- try({gg <- system.time(
zfun <- zhou(X, y, penwt, Aeq, beq, Aineq, bineq)
)}
)
if (class(gg_try)=="try-error") runtime[r,3] = NA
if (class(gg_try)!="try-error")  runtime[r,3] = gg_try[3]
cat(runtime[r,],"\n")
}
runtime.list[[ll]] <- runtime
}
a = runtime.list
for (i in 1:length(runtime.list))
{
a[[i]] = runtime.list[[i]][-1,]
}
unlist(lapply(a, colMeans))
save.image("table1.rdata")
unlist(lapply(a, colMeans, na.rm = T))
?colMeans
rm(list=ls())
library(Matrix)
library(Rcpp)
if(!require("RcppArmadillo")) install.packages("RcppArmadillo")
library(RcppArmadillo)
if(!require("devtools")) install.packages("devtools")
library(devtools)
if(!require("Rglpk")) install.packages("Rglpk")
library(Rglpk)
if(!require("MethylCapSig")) install.packages("MethylCapSig")
library(MethylCapSig)
install_github("glmgen/genlasso")
library(genlasso)
setwd("~/github/comlasso")
sourceCpp('./library/inner.cpp')
source("./library/ComLassoC.R")
source("./library/classo_2.R")
# Set parameters in table 1
# para_vec[[1]] denotes that n = 50, p = 200
para_vec = list()
para_vec[[1]] <- c(100,20)
para_vec[[2]] <- c(100,50)
para_vec[[3]] <- c(100,200)
para_vec[[4]] <- c(100,500)
para_vec[[5]] <- c(100,1000)
para_vec[[6]] <- c(100,2000)
runtime.list <- vector(mode="list",length=length(para_vec))
# number of repetitions
Rnum <- 21
ll = 1
for(ll in 1:length(para_vec))
{
n = para_vec[[ll]][1]
pk <- para_vec[[ll]][-1]
idx_gs <- cumsum(pk)-pk+1
idx_ge <- cumsum(pk)
idx_gs_r  = idx_gs - 0:(length(pk)-1)
idx_ge_r  = idx_ge - 1:length(pk)
p = sum(pk)
B_list = list()
for (j in 1:length(pk))
{
sigma <- 0.5^(abs(outer(1:(pk[j]-1),1:(pk[j]-1),"-")))
svdFit <- svd(sigma)
B = diag(svdFit$d)^0.5 %*% t(svdFit$v)
if ( j == 1)
{
mm<-rep(0,pk[j]-1); mm[1:5]<- log(0.5*pk[j])
}
B_list[[j]] = B
}
runtime<-matrix(0,Rnum,3)
colnames(runtime) <-c("comlasso", "genlasso", "zhou")
r = 1
for(r in 1:Rnum)
{
set.seed(r)
w = NULL
z = NULL
for (j in 1:length(pk))
{
B <- B_list[[j]]
tmp = matrix(rnorm(n*(pk[j]-1)), n, pk[j]-1) %*% B
if (j == 1) tmp = tmp + mm
tmpU = cbind(exp(tmp), 1)
z = cbind(z, sweep(tmpU, 1, rowSums(tmpU), FUN = "/") )
w <- cbind(w, tmp)
}
b <- rep(0,p-length(pk))
b[1:5] <- c(1,-0.8,0.6,0,0)
b[6:8] <- c(-1.5, -0.5, 1.2)
y <- drop(w %*% b)+rnorm(n,0,0.5^2)
# reparametrization for genlasso
rX = X = log(z)
Cm <- diag(1,p)
for (i in 1:length(pk))
{
sidx = idx_gs[i]:idx_ge[i]
for (j in sidx) rX[,j] = rX[,j] - rX[,idx_ge[i]]
Cm[idx_ge[i],sidx] <- 1
}
rX <- rX[,-(idx_ge)]
Cm <- Cm[,-(idx_ge)]
Cm <- cbind(0,Cm)
rX <- cbind(1, rX)
#if (p>n) Cm <- Matrix(Cm, sparse = TRUE)
Aeq = matrix(rep(1, pk), nrow = 1)
beq = matrix(0, nrow = 1)
Aineq = matrix(0, nrow = 0, ncol = dim(X)[2])
bineq = rep(0, dim(Aineq)[1])
penwt = rep(1, pk)
runtime[r,1] <- system.time(cfun2 <- comLassoC(X,y,pk=pk,lam_min=0,
tol=1e-08,KKT_check=FALSE) # Prof. Jeon
)[3]
runtime[r,2]<-system.time(gfun<-genlasso(y=y,X=rX,D=Cm,approx=FALSE,
maxsteps=length(cfun2$lambda_vec)+1,
minlam=0,
rtol=1e-07,btol=1e-07,eps=1e-4,
verbose=FALSE,svd=FALSE))[3]
gg_try <- try({gg <- system.time(
zfun <- zhou(X, y, penwt, Aeq, beq, Aineq, bineq)
)}
)
if (class(gg_try)=="try-error") runtime[r,3] = NA
if (class(gg_try)!="try-error")  runtime[r,3] = gg_try[3]
cat(runtime[r,],"\n")
}
runtime.list[[ll]] <- runtime
}
a = runtime.list
for (i in 1:length(runtime.list))
{
a[[i]] = runtime.list[[i]][-1,]
}
unlist(lapply(a, colMeans, na.rm = T))
save.image("table1.rdata")
matrix(unlist(lapply(a, colMeans, na.rm = T)),nrow = 3)
ls()
